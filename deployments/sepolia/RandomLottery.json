{
  "address": "0xeA05DcD11639EC822A0CE24bC2CbcFdFC018f2D8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lottery__NotEnoughEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lottery__notEnoughLotterytime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lottery__notEnoughToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lottery__notOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lottery__notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lottery__notnewBie",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "counterNo",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "minplayers",
          "type": "uint256"
        }
      ],
      "name": "lotteryAnnounceMent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryCounter",
          "type": "uint256"
        }
      ],
      "name": "lotteryForceEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryCounter",
          "type": "uint256"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryCounter",
          "type": "uint256"
        }
      ],
      "name": "checkLotteryStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryCounter",
          "type": "uint256"
        }
      ],
      "name": "checkThings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryCounter",
          "type": "uint256"
        }
      ],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeTokenToeth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryCounter",
          "type": "uint256"
        }
      ],
      "name": "forceLotteryClosed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOverAllLotteryStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryCounter",
          "type": "uint256"
        }
      ],
      "name": "getYourRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYourStreak",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getlatestLoginTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loginManagement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "streak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "s_lastTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "check_reset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loginManagement1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryCompletionOwnerTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "s_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "s_latestTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "s_interval",
          "type": "uint256"
        },
        {
          "internalType": "enum RandomLottery.lotteryState",
          "name": "s_lotteryState",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "MinPlayers",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_timeInterval",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minplayers",
          "type": "uint256"
        }
      ],
      "name": "lotteryStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryCounter",
          "type": "uint256"
        }
      ],
      "name": "minplayerRequiredToJoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newBieBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCashout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relationId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c394228500e88360c90c895efc138338d11e04a8e924dd85e3d046a3b199c93",
  "receipt": {
    "to": null,
    "from": "0xfE5C71D00450EfFFa0699058b5f57DEA559802b9",
    "contractAddress": "0xeA05DcD11639EC822A0CE24bC2CbcFdFC018f2D8",
    "transactionIndex": 61,
    "gasUsed": "3378718",
    "logsBloom": "0x
    "blockHash": "0xb4be7c961a81271b2fbc7a0d13d86bf975bffb5b7e6d201478bfaa0adc49a17b",
    "transactionHash": "0x6c394228500e88360c90c895efc138338d11e04a8e924dd85e3d046a3b199c93",
    "logs": [],
    "blockNumber": 5698262,
    "cumulativeGasUsed": "13454763",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2506
  ],
  "numDeployments": 13,
  "solcInputHash": "d2d50796ae7a49ddc8462783f6ca63b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lottery__NotEnoughEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lottery__notEnoughLotterytime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lottery__notEnoughToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lottery__notOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lottery__notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lottery__notnewBie\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"counterNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minplayers\",\"type\":\"uint256\"}],\"name\":\"lotteryAnnounceMent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryCounter\",\"type\":\"uint256\"}],\"name\":\"lotteryForceEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryCounter\",\"type\":\"uint256\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryCounter\",\"type\":\"uint256\"}],\"name\":\"checkLotteryStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryCounter\",\"type\":\"uint256\"}],\"name\":\"checkThings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryCounter\",\"type\":\"uint256\"}],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeTokenToeth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryCounter\",\"type\":\"uint256\"}],\"name\":\"forceLotteryClosed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOverAllLotteryStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryCounter\",\"type\":\"uint256\"}],\"name\":\"getYourRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYourStreak\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlatestLoginTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loginManagement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"streak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_lastTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"check_reset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loginManagement1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryCompletionOwnerTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_latestTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_interval\",\"type\":\"uint256\"},{\"internalType\":\"enum RandomLottery.lotteryState\",\"name\":\"s_lotteryState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"MinPlayers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_timeInterval\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minplayers\",\"type\":\"uint256\"}],\"name\":\"lotteryStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryCounter\",\"type\":\"uint256\"}],\"name\":\"minplayerRequiredToJoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newBieBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCashout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relationId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"helloiampratyush\",\"kind\":\"dev\",\"methods\":{},\"title\":\"a sample lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"this contract is for creating  untamperable decentralized lottery smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lottery.sol\":\"RandomLottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"contracts/lottery.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.7;\\n//import\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nerror lottery__NotEnoughEth();\\nerror Lottery_TransferFailed();\\nerror lottery__notOpen();\\nerror  lottery__notEnoughToken();\\nerror lottery__notnewBie();\\nerror lottery__newBie();\\nerror lottery__notEnoughLotterytime();\\nerror lottery__notOwner();\\n/**\\n * @title a sample lottery contract\\n * @author helloiampratyush\\n * @notice this contract is for creating  untamperable decentralized lottery smart contract\\n */\\n\\n\\ncontract RandomLottery is VRFConsumerBaseV2{\\n    address private randomAddress;\\n    enum lotteryState {\\n        OPEN,\\n     CLOSED\\n    }\\n    struct lotteryThings\\n    {\\n         uint256 s_entranceFee;\\n         uint256 s_latestTimeStamp;\\n         uint256 s_interval;\\n         lotteryState s_lotteryState;\\n         uint256 MinPlayers;\\n    }\\n    struct login{\\n        uint256 streak;\\n        uint256 s_lastTimeStamp;\\n        uint256 check_reset;\\n    }\\n\\n    // uint256 0=OPEN,uint256 1=CALCULATING\\n    //state variable\\n    uint256 public lotteryCounter=1;\\n    uint256 public lotteryCompletionOwnerTime=0;\\n \\n    //lottery variable\\n    address payable i_owner;\\n   //mapping (uint256=>uint256) private WinnerIndex;\\n   mapping(uint256=>lotteryThings) public lotteryMap;\\n   mapping(uint256=>address payable[] ) public  s_players;\\n   mapping(address=>uint256) public tokenBalance;\\n   mapping(address=>login) public loginManagement;\\n   mapping(uint256=>RequestStatus) public s_requests;\\n   mapping(uint256=>uint256) public relationId;\\n    //events\\n    event lotteryAnnounceMent(uint256 counterNo,uint256 entranceFee,uint256 timeStamp,uint256 endTime,uint256 indexed minplayers);\\n    event winnerPicked(address indexed winner,uint256 lotteryCounter);\\n    event lotteryForceEnded(uint256 lotteryCounter);\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n    }\\n \\n\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    // Your subscription ID.\\n    uint64 public s_subscriptionId;\\n\\n    // past requests Id.\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n    uint256[] public lastRandomWords;\\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    // For a list of available gas lanes on each network,\\n    // see https://docs.chain.link/docs/vrf/v2/subscription/supported-networks/#configurations\\n    bytes32 keyHash =\\n        0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c;\\n    uint32 callbackGasLimit = 2500000;\\n    uint16 requestConfirmations = 3;\\n    uint32 numWords = 1;\\n    //consructor\\n   constructor(uint64 subscriptionId)\\n  VRFConsumerBaseV2(0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625)\\n    {\\n          i_owner=payable(msg.sender);\\n        COORDINATOR = VRFCoordinatorV2Interface(\\n            0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625\\n        );\\n        s_subscriptionId = subscriptionId;\\n   }  \\n\\n   //function\\n       function lotteryStart(uint16 _timeInterval,uint256 _entranceFee,uint256 _minplayers) public \\n       {\\n        if(msg.sender!=i_owner)\\n        {\\n            revert lottery__notOwner();\\n        }\\n       lotteryMap[lotteryCounter]=lotteryThings(_entranceFee,block.timestamp,_timeInterval,lotteryState.OPEN,_minplayers);\\n       emit lotteryAnnounceMent(lotteryCounter,_entranceFee,block.timestamp, block.timestamp+_timeInterval,_minplayers);\\n         lotteryCounter+=1;  \\n       }\\n\\n        function enterLottery(uint256 _lotteryCounter) public payable {\\n        if (msg.value < lotteryMap[_lotteryCounter].s_entranceFee) {\\n            revert lottery__NotEnoughEth();\\n        }\\n        if (lotteryMap[_lotteryCounter].s_lotteryState != lotteryState.OPEN) {\\n            revert lottery__notOpen();\\n        }\\n       if(block.timestamp>lotteryMap[_lotteryCounter].s_latestTimeStamp+lotteryMap[_lotteryCounter].s_interval){\\n        revert lottery__notOpen();\\n       }\\n        s_players[_lotteryCounter].push(payable(msg.sender));\\n        randomAddress=msg.sender;\\n    }\\n\\n       function checkThings(uint256 _lotteryCounter) public  returns(uint256 requestId) \\n    {\\n    require(msg.sender==i_owner,\\\"you are not eligible\\\");\\n    bool isDeadinePassed=(block.timestamp>=(lotteryMap[_lotteryCounter].s_latestTimeStamp+lotteryMap[_lotteryCounter].s_interval));\\n    bool isPlayerAll=(s_players[_lotteryCounter].length>=lotteryMap[_lotteryCounter].MinPlayers);\\n    bool isLotteryActive=(lotteryMap[lotteryCounter].s_lotteryState==lotteryState.OPEN);\\n    bool res=(isDeadinePassed&&isPlayerAll&&isLotteryActive);\\n    if(res){\\n\\n          requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        \\n        s_requests[requestId] = RequestStatus({\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        emit RequestSent(requestId, numWords);\\n          relationId[requestId]=_lotteryCounter;\\n    }\\n    else{\\n        return 0;\\n    }\\n    \\n   }\\n        function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n           lastRandomWords=_randomWords;\\n           lastRequestId=_requestId;\\n        uint256 _lotteryCounter=relationId[lastRequestId];\\n         uint256 indexofWinner;\\n         indexofWinner=lastRandomWords[0]%s_players[_lotteryCounter].length;\\n         address payable s_recentWinner= payable (s_players[_lotteryCounter][indexofWinner]);\\n          uint256 amount=(4*lotteryMap[_lotteryCounter].s_entranceFee)*(s_players[_lotteryCounter].length)/5;\\n          lotteryMap[_lotteryCounter].s_lotteryState=lotteryState.CLOSED;\\n          (bool success,)=(s_recentWinner).call{value:amount}(\\\"\\\");\\n          require(success,\\\"failed\\\");\\n\\n             //token distribution\\n            for(uint256 i=0;i<s_players[_lotteryCounter].length;i++){\\n                address participants=s_players[_lotteryCounter][i];\\n                tokenBalance[participants]+=4;\\n\\n             }\\n             lotteryCompletionOwnerTime+=1;\\n             emit winnerPicked(s_recentWinner, _lotteryCounter);\\n             emit RequestFulfilled(_requestId, _randomWords);\\n    }\\n\\n           //token exchanging\\nfunction exchangeTokenToeth() public returns(bool){\\n    if(getTokenBalance()<100){\\n        revert lottery__notEnoughToken();\\n    }\\n    require(address(this).balance>=0.1*1e18,\\\"can not exchange now,low contract balance \\\");\\n    require(getOverAllLotteryStatus(),\\\"all lottery should be in closed state\\\");\\n      tokenBalance[msg.sender]-=100;\\n      (bool success,)=(msg.sender).call{value:0.1*1e18}(\\\"\\\");\\n      require(success,\\\"transaction Failed\\\");\\n      return true;\\n      }\\n    function newBieBonus() public {\\n    \\n        if(loginManagement[msg.sender].check_reset==0){\\n            loginManagement[msg.sender]=login(1,block.timestamp,1);\\n            tokenBalance[msg.sender]+=5;\\n\\n        }\\n        else {\\n                revert lottery__notnewBie(); \\n        }\\n    }\\n    //login token distribution\\n          function loginManagement1() public {\\n          require(loginManagement[msg.sender].check_reset>0,\\\"you are new bie\\\");\\n          require((block.timestamp)-(loginManagement[msg.sender].s_lastTimeStamp)>=(24*3600),\\\"not 24 hours past\\\");\\n           if(block.timestamp-(loginManagement[msg.sender].s_lastTimeStamp)>(2*24*3600)){\\n                       loginManagement[msg.sender].streak=1;\\n                     \\n                       loginManagement[msg.sender].s_lastTimeStamp=block.timestamp;\\n                       tokenBalance[msg.sender]+=1;\\n           }\\n           else {\\n            uint256 streakDay=loginManagement[msg.sender].streak;\\n                 if(streakDay>=1&&streakDay<6){\\n                     loginManagement[msg.sender].streak+=1;\\n                \\n                       loginManagement[msg.sender].s_lastTimeStamp=block.timestamp;\\n                       tokenBalance[msg.sender]+=1;\\n                 }\\n                 else{\\n                     loginManagement[msg.sender].streak+=1;\\n                    \\n                       loginManagement[msg.sender].s_lastTimeStamp=block.timestamp;\\n                       tokenBalance[msg.sender]+=2;\\n                 }\\n           }\\n    }\\n    //owner cashout\\n    function ownerCashout() public {\\n        require(msg.sender==i_owner,\\\"you are not eligible for commercial fund\\\");\\n         require(getOverAllLotteryStatus(),\\\"all lottery should be in closed state\\\");\\n        if(lotteryCompletionOwnerTime>5){\\n             require(address(this).balance>=0.8*1e18,\\\"sorry you can not cash out now,low balance\\\");\\n                         lotteryCompletionOwnerTime-=5;\\n        (bool success,)= i_owner.call{value:0.8*1e18}(\\\"\\\");\\n      require(success,\\\"transaction failed\\\");\\n      \\n        }\\n        else {\\n            revert lottery__notEnoughLotterytime();\\n        }       \\n    }\\n    //refund function\\n    function getYourRefund(uint256 _lotteryCounter) public {\\n        uint256 lotteryEnded=lotteryMap[_lotteryCounter].s_interval+lotteryMap[_lotteryCounter].s_latestTimeStamp;\\n        require(lotteryMap[_lotteryCounter].s_lotteryState==lotteryState.OPEN,\\\"successFully completed lottery\\\");\\n        require(block.timestamp-lotteryEnded>3600*24,\\\"wait for sometime\\\");\\n        bool varCheck=false;\\n        uint256 counter;\\n        for(uint256 i=0;i<s_players[_lotteryCounter].length;i++){\\n            if(s_players[_lotteryCounter][i]==msg.sender){\\n                counter=i;\\n                varCheck=true;\\n            }\\n        }\\n        require(varCheck==true,\\\"you are not in this list\\\");\\n        uint256 getRefund=lotteryMap[_lotteryCounter].s_entranceFee;\\n        delete s_players[_lotteryCounter][counter];\\n          (bool success,)=(msg.sender).call{value:getRefund}(\\\"\\\");\\n          require(success,\\\"transaction failed\\\");\\n        \\n         if(s_players[_lotteryCounter].length==0){\\n            lotteryMap[_lotteryCounter].s_lotteryState=lotteryState.CLOSED;\\n\\n         }\\n    }\\n\\n     function forceLotteryClosed(uint256 _lotteryCounter) public {\\n\\n             require(msg.sender==i_owner,\\\"owner required for shutdown lottery\\\");\\n             require(lotteryMap[_lotteryCounter].s_lotteryState==lotteryState.OPEN,\\\"no need to approve lottery was successful\\\");\\n             uint256 lotteryEnded=lotteryMap[_lotteryCounter].s_interval+lotteryMap[_lotteryCounter].s_latestTimeStamp;\\n              require(block.timestamp-lotteryEnded>3600*24*2,\\\"wait for sometime\\\");\\n    lotteryMap[_lotteryCounter].s_lotteryState=lotteryState.CLOSED;\\n    emit lotteryForceEnded(_lotteryCounter);\\n    }\\n    //some getter\\n    function getOverAllLotteryStatus() public view returns(bool){\\n        bool totalStatus=true;\\n        for(uint256 i=1;i<lotteryCounter;i++){\\n            bool status=(lotteryMap[i].s_lotteryState==lotteryState.CLOSED);\\n            totalStatus=totalStatus&&status;\\n        }\\n        return totalStatus;\\n    }\\n    \\n    //still refund is active\\n   \\n   function getYourStreak() public view returns(uint256){\\n    return(loginManagement[msg.sender].streak);\\n   }      \\n    function getTokenBalance() public view returns(uint256){\\n        return (tokenBalance[msg.sender]);\\n    }\\n     function minplayerRequiredToJoin(uint256 _lotteryCounter) public view returns(uint256){\\n        require((lotteryMap[_lotteryCounter].MinPlayers-s_players[_lotteryCounter].length)>0);\\n        return (lotteryMap[_lotteryCounter].MinPlayers-s_players[_lotteryCounter].length);\\n     }\\n    function checkLotteryStatus(uint256 _lotteryCounter) public view returns(bool){\\n        return(lotteryMap[_lotteryCounter].s_lotteryState==lotteryState.OPEN);\\n    }\\n    function getlatestLoginTime() public view returns(uint256){\\n        return (loginManagement[msg.sender].s_lastTimeStamp);\\n    }\\n}\",\"keccak256\":\"0x20838d90ecbe5bf9a06bc8a46779338bad1d0ae24cccf58849a009d6b5e4bbd6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526001805560006002557f474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c60001b600e55622625a0600f60006101000a81548163ffffffff021916908363ffffffff1602179055506003600f60046101000a81548161ffff021916908361ffff1602179055506001600f60066101000a81548163ffffffff021916908363ffffffff160217905550348015620000a557600080fd5b5060405162003cb638038062003cb68339818101604052810190620000cb919062000228565b738103b0a8a00be2ddc778e6e7eaa21791cd3646258073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550738103b0a8a00be2ddc778e6e7eaa21791cd364625600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550506200025a565b600080fd5b600067ffffffffffffffff82169050919050565b6200020281620001e3565b81146200020e57600080fd5b50565b6000815190506200022281620001f7565b92915050565b600060208284031215620002415762000240620001de565b5b6000620002518482850162000211565b91505092915050565b60805160601c613a36620002806000396000818161078901526107dd0152613a366000f3fe6080604052600436106101b75760003560e01c80638ac00021116100ec578063c4b9b4581161008a578063daf41ad411610064578063daf41ad414610618578063e1df60d014610657578063eedc966a14610682578063fc2a88c3146106bf576101b7565b8063c4b9b4581461059b578063cf383e41146105b2578063d5f036de146105db576101b7565b8063944e4520116100c6578063944e4520146104f25780639d5055fa1461051b578063a168fa8914610532578063c223df2314610570576101b7565b80638ac000211461045f5780638ef8e6f61461048a578063900fc869146104b5576101b7565b80633fd43098116101595780637385359c116101335780637385359c1461038d57806382b2e257146103b65780638796ba8c146103e1578063894221581461041e576101b7565b80633fd430981461031b5780634253b85e146103375780634a4a6b4f14610362576101b7565b806320c5e3c91161019557806320c5e3c91461024d578063223b2e421461028a5780632dc2eade146102c75780633522ae7e146102de576101b7565b806312ca5f5a146101bc57806318c5aa9c146101f95780631fe543e314610224575b600080fd5b3480156101c857600080fd5b506101e360048036038101906101de919061283b565b6106ea565b6040516101f09190612883565b60405180910390f35b34801561020557600080fd5b5061020e61073d565b60405161021b91906128ad565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190612a21565b610787565b005b34801561025957600080fd5b50610274600480360381019061026f919061283b565b610847565b60405161028191906128ad565b60405180910390f35b34801561029657600080fd5b506102b160048036038101906102ac919061283b565b6108cb565b6040516102be91906128ad565b60405180910390f35b3480156102d357600080fd5b506102dc6108e3565b005b3480156102ea57600080fd5b506103056004803603810190610300919061283b565b610d95565b60405161031291906128ad565b60405180910390f35b6103356004803603810190610330919061283b565b611196565b005b34801561034357600080fd5b5061034c61138f565b6040516103599190612883565b60405180910390f35b34801561036e57600080fd5b50610377611578565b60405161038491906128ad565b60405180910390f35b34801561039957600080fd5b506103b460048036038101906103af9190612ab7565b61157e565b005b3480156103c257600080fd5b506103cb611720565b6040516103d891906128ad565b60405180910390f35b3480156103ed57600080fd5b506104086004803603810190610403919061283b565b611767565b60405161041591906128ad565b60405180910390f35b34801561042a57600080fd5b506104456004803603810190610440919061283b565b61178b565b604051610456959493929190612b81565b60405180910390f35b34801561046b57600080fd5b506104746117ce565b6040516104819190612bf7565b60405180910390f35b34801561049657600080fd5b5061049f6117e8565b6040516104ac9190612883565b60405180910390f35b3480156104c157600080fd5b506104dc60048036038101906104d7919061283b565b611876565b6040516104e991906128ad565b60405180910390f35b3480156104fe57600080fd5b506105196004803603810190610514919061283b565b61189a565b005b34801561052757600080fd5b50610530611aba565b005b34801561053e57600080fd5b506105596004803603810190610554919061283b565b611c12565b604051610567929190612c12565b60405180910390f35b34801561057c57600080fd5b50610585611c50565b60405161059291906128ad565b60405180910390f35b3480156105a757600080fd5b506105b0611c56565b005b3480156105be57600080fd5b506105d960048036038101906105d4919061283b565b611ead565b005b3480156105e757600080fd5b5061060260048036038101906105fd9190612c3b565b612250565b60405161060f9190612cbc565b60405180910390f35b34801561062457600080fd5b5061063f600480360381019061063a9190612d15565b61229e565b60405161064e93929190612d42565b60405180910390f35b34801561066357600080fd5b5061066c6122c8565b60405161067991906128ad565b60405180910390f35b34801561068e57600080fd5b506106a960048036038101906106a49190612d15565b612312565b6040516106b691906128ad565b60405180910390f35b3480156106cb57600080fd5b506106d461232a565b6040516106e191906128ad565b60405180910390f35b60008060018111156106ff576106fe612b0a565b5b6004600084815260200190815260200160002060030160009054906101000a900460ff16600181111561073557610734612b0a565b5b149050919050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610830929190612d88565b60405180910390fd5b6108438282612330565b5050565b600080600560008481526020019081526020016000208054905060046000858152602001908152602001600020600401546108829190612de0565b1161088c57600080fd5b600560008381526020019081526020016000208054905060046000848152602001908152602001600020600401546108c49190612de0565b9050919050565b60096020528060005260406000206000915090505481565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015411610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095f90612e71565b60405180910390fd5b62015180600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154426109ba9190612de0565b10156109fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f290612edd565b60405180910390fd5b6202a300600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015442610a4d9190612de0565b1115610b3e576001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b329190612efd565b92505081905550610d93565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905060018110158015610b965750600681105b15610c98576001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610bee9190612efd565b9250508190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c8c9190612efd565b92505081905550610d91565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610ceb9190612efd565b9250508190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506002600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d899190612efd565b925050819055505b505b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1e90612f9f565b60405180910390fd5b600060046000848152602001908152602001600020600201546004600085815260200190815260200160002060010154610e619190612efd565b4210159050600060046000858152602001908152602001600020600401546005600086815260200190815260200160002080549050101590506000806001811115610eaf57610eae612b0a565b5b60046000600154815260200190815260200160002060030160009054906101000a900460ff166001811115610ee757610ee6612b0a565b5b1490506000838015610ef65750825b8015610eff5750815b9050801561117f57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600e54600a60149054906101000a900467ffffffffffffffff16600f60049054906101000a900461ffff16600f60009054906101000a900463ffffffff16600f60069054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610fb6959493929190613006565b602060405180830381600087803b158015610fd057600080fd5b505af1158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611008919061306e565b94506040518060600160405280600015158152602001600115158152602001600067ffffffffffffffff811115611042576110416128de565b5b6040519080825280602002602001820160405280156110705781602001602082028036833780820191505090505b508152506008600087815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010190805190602001906110e3929190612787565b50905050600b85908060018154018082558091505060019003906000526020600020016000909190919091505584600c819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee85600f60069054906101000a900463ffffffff1660405161115a92919061309b565b60405180910390a185600960008781526020019081526020016000208190555061118c565b6000945050505050611191565b505050505b919050565b60046000828152602001908152602001600020600001543410156111e6576040517ffacecd8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156111fa576111f9612b0a565b5b6004600083815260200190815260200160002060030160009054906101000a900460ff1660018111156112305761122f612b0a565b5b14611267576040517f2d16e31800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004600082815260200190815260200160002060020154600460008381526020019081526020016000206001015461129f9190612efd565b4211156112d8576040517f2d16e31800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60056000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000606461139b611720565b10156113d3576040517fc1c6515400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67016345785d8a000047101561141e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141590613136565b60405180910390fd5b6114266117e8565b611465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145c906131c8565b60405180910390fd5b6064600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b59190612de0565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff1667016345785d8a00006040516114ea90613219565b60006040518083038185875af1925050503d8060008114611527576040519150601f19603f3d011682016040523d82523d6000602084013e61152c565b606091505b5050905080611570576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115679061327a565b60405180910390fd5b600191505090565b60015481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611605576040517fb0eaf04000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052808381526020014281526020018461ffff1681526020016000600181111561163a57611639612b0a565b5b81526020018281525060046000600154815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908360018111156116a1576116a0612b0a565b5b021790555060808201518160040155905050807fbc48fb628244786db507e41bad00641a1254fac13171bb3acb66249f3578f6e060015484428761ffff16426116ea9190612efd565b6040516116fa949392919061329a565b60405180910390a260018060008282546117149190612efd565b92505081905550505050565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600b818154811061177757600080fd5b906000526020600020016000915090505481565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900460ff16908060040154905085565b600a60149054906101000a900467ffffffffffffffff1681565b600080600190506000600190505b60015481101561186e57600060018081111561181557611814612b0a565b5b6004600084815260200190815260200160002060030160009054906101000a900460ff16600181111561184b5761184a612b0a565b5b1490508280156118585750805b9250508080611866906132df565b9150506117f6565b508091505090565b600d818154811061188657600080fd5b906000526020600020016000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461192a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119219061339a565b60405180910390fd5b6000600181111561193e5761193d612b0a565b5b6004600083815260200190815260200160002060030160009054906101000a900460ff16600181111561197457611973612b0a565b5b146119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ab9061342c565b60405180910390fd5b6000600460008381526020019081526020016000206001015460046000848152602001908152602001600020600201546119ee9190612efd565b90506202a3008142611a009190612de0565b11611a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3790613498565b60405180910390fd5b60016004600084815260200190815260200160002060030160006101000a81548160ff02191690836001811115611a7a57611a79612b0a565b5b02179055507fd96e4ba193cc5f77ba3c7be38bd8d5092417e470ce0a5df305f061c1157b5d4682604051611aae91906128ad565b60405180910390a15050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541415611bde576040518060600160405280600181526020014281526020016001815250600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506005600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bd29190612efd565b92505081905550611c10565b6040517fc98248a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60086020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdd9061352a565b60405180910390fd5b611cee6117e8565b611d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d24906131c8565b60405180910390fd5b60056002541115611e7957670b1a2bc2ec500000471015611d83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7a906135bc565b60405180910390fd5b600560026000828254611d969190612de0565b925050819055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16670b1a2bc2ec500000604051611ded90613219565b60006040518083038185875af1925050503d8060008114611e2a576040519150601f19603f3d011682016040523d82523d6000602084013e611e2f565b606091505b5050905080611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90613628565b60405180910390fd5b50611eab565b6040517ff0123e7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600060046000838152602001908152602001600020600101546004600084815260200190815260200160002060020154611ee79190612efd565b905060006001811115611efd57611efc612b0a565b5b6004600084815260200190815260200160002060030160009054906101000a900460ff166001811115611f3357611f32612b0a565b5b14611f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6a90613694565b60405180910390fd5b620151808142611f839190612de0565b11611fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fba90613498565b60405180910390fd5b60008080600090505b6005600086815260200190815260200160002080549050811015612088573373ffffffffffffffffffffffffffffffffffffffff16600560008781526020019081526020016000208281548110612026576120256136b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561207557809150600192505b8080612080906132df565b915050611fcc565b5060011515821515146120d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c79061372f565b60405180910390fd5b6000600460008681526020019081526020016000206000015490506005600086815260200190815260200160002082815481106121105761210f6136b4565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560003373ffffffffffffffffffffffffffffffffffffffff168260405161216390613219565b60006040518083038185875af1925050503d80600081146121a0576040519150601f19603f3d011682016040523d82523d6000602084013e6121a5565b606091505b50509050806121e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e090613628565b60405180910390fd5b6000600560008881526020019081526020016000208054905014156122485760016004600088815260200190815260200160002060030160006101000a81548160ff0219169083600181111561224257612241612b0a565b5b02179055505b505050505050565b6005602052816000526040600020818154811061226c57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915090508060000154908060010154908060020154905083565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905090565b60066020528060005260406000206000915090505481565b600c5481565b6008600083815260200190815260200160002060000160019054906101000a900460ff16612393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238a9061379b565b60405180910390fd5b60016008600084815260200190815260200160002060000160006101000a81548160ff021916908315150217905550806008600084815260200190815260200160002060010190805190602001906123ec929190612787565b5080600d9080519060200190612403929190612787565b5081600c81905550600060096000600c54815260200190815260200160002054905060006005600083815260200190815260200160002080549050600d600081548110612453576124526136b4565b5b906000526020600020015461246891906137ea565b90506000600560008481526020019081526020016000208281548110612491576124906136b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600580600086815260200190815260200160002080549050600460008781526020019081526020016000206000015460046124fb919061381b565b612505919061381b565b61250f9190613875565b905060016004600086815260200190815260200160002060030160006101000a81548160ff0219169083600181111561254b5761254a612b0a565b5b021790555060008273ffffffffffffffffffffffffffffffffffffffff168260405161257690613219565b60006040518083038185875af1925050503d80600081146125b3576040519150601f19603f3d011682016040523d82523d6000602084013e6125b8565b606091505b50509050806125fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f3906138f2565b60405180910390fd5b60005b60056000878152602001908152602001600020805490508110156126dc576000600560008881526020019081526020016000208281548110612644576126436136b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506004600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126c19190612efd565b925050819055505080806126d4906132df565b9150506125ff565b506001600260008282546126f09190612efd565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f3444ac4b5677732d228b4956f1313b0f06d68623b75e34aebb92a1b061da17248660405161273d91906128ad565b60405180910390a27ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d87876040516127769291906139d0565b60405180910390a150505050505050565b8280548282559060005260206000209081019282156127c3579160200282015b828111156127c25782518255916020019190600101906127a7565b5b5090506127d091906127d4565b5090565b5b808211156127ed5760008160009055506001016127d5565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61281881612805565b811461282357600080fd5b50565b6000813590506128358161280f565b92915050565b600060208284031215612851576128506127fb565b5b600061285f84828501612826565b91505092915050565b60008115159050919050565b61287d81612868565b82525050565b60006020820190506128986000830184612874565b92915050565b6128a781612805565b82525050565b60006020820190506128c2600083018461289e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612916826128cd565b810181811067ffffffffffffffff82111715612935576129346128de565b5b80604052505050565b60006129486127f1565b9050612954828261290d565b919050565b600067ffffffffffffffff821115612974576129736128de565b5b602082029050602081019050919050565b600080fd5b600061299d61299884612959565b61293e565b905080838252602082019050602084028301858111156129c0576129bf612985565b5b835b818110156129e957806129d58882612826565b8452602084019350506020810190506129c2565b5050509392505050565b600082601f830112612a0857612a076128c8565b5b8135612a1884826020860161298a565b91505092915050565b60008060408385031215612a3857612a376127fb565b5b6000612a4685828601612826565b925050602083013567ffffffffffffffff811115612a6757612a66612800565b5b612a73858286016129f3565b9150509250929050565b600061ffff82169050919050565b612a9481612a7d565b8114612a9f57600080fd5b50565b600081359050612ab181612a8b565b92915050565b600080600060608486031215612ad057612acf6127fb565b5b6000612ade86828701612aa2565b9350506020612aef86828701612826565b9250506040612b0086828701612826565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612b4a57612b49612b0a565b5b50565b6000819050612b5b82612b39565b919050565b6000612b6b82612b4d565b9050919050565b612b7b81612b60565b82525050565b600060a082019050612b96600083018861289e565b612ba3602083018761289e565b612bb0604083018661289e565b612bbd6060830185612b72565b612bca608083018461289e565b9695505050505050565b600067ffffffffffffffff82169050919050565b612bf181612bd4565b82525050565b6000602082019050612c0c6000830184612be8565b92915050565b6000604082019050612c276000830185612874565b612c346020830184612874565b9392505050565b60008060408385031215612c5257612c516127fb565b5b6000612c6085828601612826565b9250506020612c7185828601612826565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ca682612c7b565b9050919050565b612cb681612c9b565b82525050565b6000602082019050612cd16000830184612cad565b92915050565b6000612ce282612c7b565b9050919050565b612cf281612cd7565b8114612cfd57600080fd5b50565b600081359050612d0f81612ce9565b92915050565b600060208284031215612d2b57612d2a6127fb565b5b6000612d3984828501612d00565b91505092915050565b6000606082019050612d57600083018661289e565b612d64602083018561289e565b612d71604083018461289e565b949350505050565b612d8281612cd7565b82525050565b6000604082019050612d9d6000830185612d79565b612daa6020830184612d79565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612deb82612805565b9150612df683612805565b925082821015612e0957612e08612db1565b5b828203905092915050565b600082825260208201905092915050565b7f796f7520617265206e6577206269650000000000000000000000000000000000600082015250565b6000612e5b600f83612e14565b9150612e6682612e25565b602082019050919050565b60006020820190508181036000830152612e8a81612e4e565b9050919050565b7f6e6f7420323420686f7572732070617374000000000000000000000000000000600082015250565b6000612ec7601183612e14565b9150612ed282612e91565b602082019050919050565b60006020820190508181036000830152612ef681612eba565b9050919050565b6000612f0882612805565b9150612f1383612805565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f4857612f47612db1565b5b828201905092915050565b7f796f7520617265206e6f7420656c696769626c65000000000000000000000000600082015250565b6000612f89601483612e14565b9150612f9482612f53565b602082019050919050565b60006020820190508181036000830152612fb881612f7c565b9050919050565b6000819050919050565b612fd281612fbf565b82525050565b612fe181612a7d565b82525050565b600063ffffffff82169050919050565b61300081612fe7565b82525050565b600060a08201905061301b6000830188612fc9565b6130286020830187612be8565b6130356040830186612fd8565b6130426060830185612ff7565b61304f6080830184612ff7565b9695505050505050565b6000815190506130688161280f565b92915050565b600060208284031215613084576130836127fb565b5b600061309284828501613059565b91505092915050565b60006040820190506130b0600083018561289e565b6130bd6020830184612ff7565b9392505050565b7f63616e206e6f742065786368616e6765206e6f772c6c6f7720636f6e7472616360008201527f742062616c616e63652000000000000000000000000000000000000000000000602082015250565b6000613120602a83612e14565b915061312b826130c4565b604082019050919050565b6000602082019050818103600083015261314f81613113565b9050919050565b7f616c6c206c6f74746572792073686f756c6420626520696e20636c6f7365642060008201527f7374617465000000000000000000000000000000000000000000000000000000602082015250565b60006131b2602583612e14565b91506131bd82613156565b604082019050919050565b600060208201905081810360008301526131e1816131a5565b9050919050565b600081905092915050565b50565b60006132036000836131e8565b915061320e826131f3565b600082019050919050565b6000613224826131f6565b9150819050919050565b7f7472616e73616374696f6e204661696c65640000000000000000000000000000600082015250565b6000613264601283612e14565b915061326f8261322e565b602082019050919050565b6000602082019050818103600083015261329381613257565b9050919050565b60006080820190506132af600083018761289e565b6132bc602083018661289e565b6132c9604083018561289e565b6132d6606083018461289e565b95945050505050565b60006132ea82612805565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561331d5761331c612db1565b5b600182019050919050565b7f6f776e657220726571756972656420666f722073687574646f776e206c6f747460008201527f6572790000000000000000000000000000000000000000000000000000000000602082015250565b6000613384602383612e14565b915061338f82613328565b604082019050919050565b600060208201905081810360008301526133b381613377565b9050919050565b7f6e6f206e65656420746f20617070726f7665206c6f747465727920776173207360008201527f75636365737366756c0000000000000000000000000000000000000000000000602082015250565b6000613416602983612e14565b9150613421826133ba565b604082019050919050565b6000602082019050818103600083015261344581613409565b9050919050565b7f7761697420666f7220736f6d6574696d65000000000000000000000000000000600082015250565b6000613482601183612e14565b915061348d8261344c565b602082019050919050565b600060208201905081810360008301526134b181613475565b9050919050565b7f796f7520617265206e6f7420656c696769626c6520666f7220636f6d6d65726360008201527f69616c2066756e64000000000000000000000000000000000000000000000000602082015250565b6000613514602883612e14565b915061351f826134b8565b604082019050919050565b6000602082019050818103600083015261354381613507565b9050919050565b7f736f72727920796f752063616e206e6f742063617368206f7574206e6f772c6c60008201527f6f772062616c616e636500000000000000000000000000000000000000000000602082015250565b60006135a6602a83612e14565b91506135b18261354a565b604082019050919050565b600060208201905081810360008301526135d581613599565b9050919050565b7f7472616e73616374696f6e206661696c65640000000000000000000000000000600082015250565b6000613612601283612e14565b915061361d826135dc565b602082019050919050565b6000602082019050818103600083015261364181613605565b9050919050565b7f7375636365737346756c6c7920636f6d706c65746564206c6f74746572790000600082015250565b600061367e601e83612e14565b915061368982613648565b602082019050919050565b600060208201905081810360008301526136ad81613671565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f796f7520617265206e6f7420696e2074686973206c6973740000000000000000600082015250565b6000613719601883612e14565b9150613724826136e3565b602082019050919050565b600060208201905081810360008301526137488161370c565b9050919050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000613785601183612e14565b91506137908261374f565b602082019050919050565b600060208201905081810360008301526137b481613778565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006137f582612805565b915061380083612805565b9250826138105761380f6137bb565b5b828206905092915050565b600061382682612805565b915061383183612805565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561386a57613869612db1565b5b828202905092915050565b600061388082612805565b915061388b83612805565b92508261389b5761389a6137bb565b5b828204905092915050565b7f6661696c65640000000000000000000000000000000000000000000000000000600082015250565b60006138dc600683612e14565b91506138e7826138a6565b602082019050919050565b6000602082019050818103600083015261390b816138cf565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61394781612805565b82525050565b6000613959838361393e565b60208301905092915050565b6000602082019050919050565b600061397d82613912565b613987818561391d565b93506139928361392e565b8060005b838110156139c35781516139aa888261394d565b97506139b583613965565b925050600181019050613996565b5085935050505092915050565b60006040820190506139e5600083018561289e565b81810360208301526139f78184613972565b9050939250505056fea264697066735822122059e2f9ffdf8073ae8fefd60a3ee4bce75e272f85b4e08ada4c38e695187e797864736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80638ac00021116100ec578063c4b9b4581161008a578063daf41ad411610064578063daf41ad414610618578063e1df60d014610657578063eedc966a14610682578063fc2a88c3146106bf576101b7565b8063c4b9b4581461059b578063cf383e41146105b2578063d5f036de146105db576101b7565b8063944e4520116100c6578063944e4520146104f25780639d5055fa1461051b578063a168fa8914610532578063c223df2314610570576101b7565b80638ac000211461045f5780638ef8e6f61461048a578063900fc869146104b5576101b7565b80633fd43098116101595780637385359c116101335780637385359c1461038d57806382b2e257146103b65780638796ba8c146103e1578063894221581461041e576101b7565b80633fd430981461031b5780634253b85e146103375780634a4a6b4f14610362576101b7565b806320c5e3c91161019557806320c5e3c91461024d578063223b2e421461028a5780632dc2eade146102c75780633522ae7e146102de576101b7565b806312ca5f5a146101bc57806318c5aa9c146101f95780631fe543e314610224575b600080fd5b3480156101c857600080fd5b506101e360048036038101906101de919061283b565b6106ea565b6040516101f09190612883565b60405180910390f35b34801561020557600080fd5b5061020e61073d565b60405161021b91906128ad565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190612a21565b610787565b005b34801561025957600080fd5b50610274600480360381019061026f919061283b565b610847565b60405161028191906128ad565b60405180910390f35b34801561029657600080fd5b506102b160048036038101906102ac919061283b565b6108cb565b6040516102be91906128ad565b60405180910390f35b3480156102d357600080fd5b506102dc6108e3565b005b3480156102ea57600080fd5b506103056004803603810190610300919061283b565b610d95565b60405161031291906128ad565b60405180910390f35b6103356004803603810190610330919061283b565b611196565b005b34801561034357600080fd5b5061034c61138f565b6040516103599190612883565b60405180910390f35b34801561036e57600080fd5b50610377611578565b60405161038491906128ad565b60405180910390f35b34801561039957600080fd5b506103b460048036038101906103af9190612ab7565b61157e565b005b3480156103c257600080fd5b506103cb611720565b6040516103d891906128ad565b60405180910390f35b3480156103ed57600080fd5b506104086004803603810190610403919061283b565b611767565b60405161041591906128ad565b60405180910390f35b34801561042a57600080fd5b506104456004803603810190610440919061283b565b61178b565b604051610456959493929190612b81565b60405180910390f35b34801561046b57600080fd5b506104746117ce565b6040516104819190612bf7565b60405180910390f35b34801561049657600080fd5b5061049f6117e8565b6040516104ac9190612883565b60405180910390f35b3480156104c157600080fd5b506104dc60048036038101906104d7919061283b565b611876565b6040516104e991906128ad565b60405180910390f35b3480156104fe57600080fd5b506105196004803603810190610514919061283b565b61189a565b005b34801561052757600080fd5b50610530611aba565b005b34801561053e57600080fd5b506105596004803603810190610554919061283b565b611c12565b604051610567929190612c12565b60405180910390f35b34801561057c57600080fd5b50610585611c50565b60405161059291906128ad565b60405180910390f35b3480156105a757600080fd5b506105b0611c56565b005b3480156105be57600080fd5b506105d960048036038101906105d4919061283b565b611ead565b005b3480156105e757600080fd5b5061060260048036038101906105fd9190612c3b565b612250565b60405161060f9190612cbc565b60405180910390f35b34801561062457600080fd5b5061063f600480360381019061063a9190612d15565b61229e565b60405161064e93929190612d42565b60405180910390f35b34801561066357600080fd5b5061066c6122c8565b60405161067991906128ad565b60405180910390f35b34801561068e57600080fd5b506106a960048036038101906106a49190612d15565b612312565b6040516106b691906128ad565b60405180910390f35b3480156106cb57600080fd5b506106d461232a565b6040516106e191906128ad565b60405180910390f35b60008060018111156106ff576106fe612b0a565b5b6004600084815260200190815260200160002060030160009054906101000a900460ff16600181111561073557610734612b0a565b5b149050919050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610830929190612d88565b60405180910390fd5b6108438282612330565b5050565b600080600560008481526020019081526020016000208054905060046000858152602001908152602001600020600401546108829190612de0565b1161088c57600080fd5b600560008381526020019081526020016000208054905060046000848152602001908152602001600020600401546108c49190612de0565b9050919050565b60096020528060005260406000206000915090505481565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015411610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095f90612e71565b60405180910390fd5b62015180600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154426109ba9190612de0565b10156109fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f290612edd565b60405180910390fd5b6202a300600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015442610a4d9190612de0565b1115610b3e576001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b329190612efd565b92505081905550610d93565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905060018110158015610b965750600681105b15610c98576001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610bee9190612efd565b9250508190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c8c9190612efd565b92505081905550610d91565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610ceb9190612efd565b9250508190555042600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506002600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d899190612efd565b925050819055505b505b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1e90612f9f565b60405180910390fd5b600060046000848152602001908152602001600020600201546004600085815260200190815260200160002060010154610e619190612efd565b4210159050600060046000858152602001908152602001600020600401546005600086815260200190815260200160002080549050101590506000806001811115610eaf57610eae612b0a565b5b60046000600154815260200190815260200160002060030160009054906101000a900460ff166001811115610ee757610ee6612b0a565b5b1490506000838015610ef65750825b8015610eff5750815b9050801561117f57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600e54600a60149054906101000a900467ffffffffffffffff16600f60049054906101000a900461ffff16600f60009054906101000a900463ffffffff16600f60069054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610fb6959493929190613006565b602060405180830381600087803b158015610fd057600080fd5b505af1158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611008919061306e565b94506040518060600160405280600015158152602001600115158152602001600067ffffffffffffffff811115611042576110416128de565b5b6040519080825280602002602001820160405280156110705781602001602082028036833780820191505090505b508152506008600087815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010190805190602001906110e3929190612787565b50905050600b85908060018154018082558091505060019003906000526020600020016000909190919091505584600c819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee85600f60069054906101000a900463ffffffff1660405161115a92919061309b565b60405180910390a185600960008781526020019081526020016000208190555061118c565b6000945050505050611191565b505050505b919050565b60046000828152602001908152602001600020600001543410156111e6576040517ffacecd8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156111fa576111f9612b0a565b5b6004600083815260200190815260200160002060030160009054906101000a900460ff1660018111156112305761122f612b0a565b5b14611267576040517f2d16e31800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004600082815260200190815260200160002060020154600460008381526020019081526020016000206001015461129f9190612efd565b4211156112d8576040517f2d16e31800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60056000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000606461139b611720565b10156113d3576040517fc1c6515400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67016345785d8a000047101561141e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141590613136565b60405180910390fd5b6114266117e8565b611465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145c906131c8565b60405180910390fd5b6064600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b59190612de0565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff1667016345785d8a00006040516114ea90613219565b60006040518083038185875af1925050503d8060008114611527576040519150601f19603f3d011682016040523d82523d6000602084013e61152c565b606091505b5050905080611570576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115679061327a565b60405180910390fd5b600191505090565b60015481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611605576040517fb0eaf04000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052808381526020014281526020018461ffff1681526020016000600181111561163a57611639612b0a565b5b81526020018281525060046000600154815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908360018111156116a1576116a0612b0a565b5b021790555060808201518160040155905050807fbc48fb628244786db507e41bad00641a1254fac13171bb3acb66249f3578f6e060015484428761ffff16426116ea9190612efd565b6040516116fa949392919061329a565b60405180910390a260018060008282546117149190612efd565b92505081905550505050565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600b818154811061177757600080fd5b906000526020600020016000915090505481565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900460ff16908060040154905085565b600a60149054906101000a900467ffffffffffffffff1681565b600080600190506000600190505b60015481101561186e57600060018081111561181557611814612b0a565b5b6004600084815260200190815260200160002060030160009054906101000a900460ff16600181111561184b5761184a612b0a565b5b1490508280156118585750805b9250508080611866906132df565b9150506117f6565b508091505090565b600d818154811061188657600080fd5b906000526020600020016000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461192a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119219061339a565b60405180910390fd5b6000600181111561193e5761193d612b0a565b5b6004600083815260200190815260200160002060030160009054906101000a900460ff16600181111561197457611973612b0a565b5b146119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ab9061342c565b60405180910390fd5b6000600460008381526020019081526020016000206001015460046000848152602001908152602001600020600201546119ee9190612efd565b90506202a3008142611a009190612de0565b11611a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3790613498565b60405180910390fd5b60016004600084815260200190815260200160002060030160006101000a81548160ff02191690836001811115611a7a57611a79612b0a565b5b02179055507fd96e4ba193cc5f77ba3c7be38bd8d5092417e470ce0a5df305f061c1157b5d4682604051611aae91906128ad565b60405180910390a15050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541415611bde576040518060600160405280600181526020014281526020016001815250600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506005600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bd29190612efd565b92505081905550611c10565b6040517fc98248a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60086020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdd9061352a565b60405180910390fd5b611cee6117e8565b611d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d24906131c8565b60405180910390fd5b60056002541115611e7957670b1a2bc2ec500000471015611d83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7a906135bc565b60405180910390fd5b600560026000828254611d969190612de0565b925050819055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16670b1a2bc2ec500000604051611ded90613219565b60006040518083038185875af1925050503d8060008114611e2a576040519150601f19603f3d011682016040523d82523d6000602084013e611e2f565b606091505b5050905080611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90613628565b60405180910390fd5b50611eab565b6040517ff0123e7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600060046000838152602001908152602001600020600101546004600084815260200190815260200160002060020154611ee79190612efd565b905060006001811115611efd57611efc612b0a565b5b6004600084815260200190815260200160002060030160009054906101000a900460ff166001811115611f3357611f32612b0a565b5b14611f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6a90613694565b60405180910390fd5b620151808142611f839190612de0565b11611fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fba90613498565b60405180910390fd5b60008080600090505b6005600086815260200190815260200160002080549050811015612088573373ffffffffffffffffffffffffffffffffffffffff16600560008781526020019081526020016000208281548110612026576120256136b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561207557809150600192505b8080612080906132df565b915050611fcc565b5060011515821515146120d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c79061372f565b60405180910390fd5b6000600460008681526020019081526020016000206000015490506005600086815260200190815260200160002082815481106121105761210f6136b4565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560003373ffffffffffffffffffffffffffffffffffffffff168260405161216390613219565b60006040518083038185875af1925050503d80600081146121a0576040519150601f19603f3d011682016040523d82523d6000602084013e6121a5565b606091505b50509050806121e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e090613628565b60405180910390fd5b6000600560008881526020019081526020016000208054905014156122485760016004600088815260200190815260200160002060030160006101000a81548160ff0219169083600181111561224257612241612b0a565b5b02179055505b505050505050565b6005602052816000526040600020818154811061226c57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915090508060000154908060010154908060020154905083565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905090565b60066020528060005260406000206000915090505481565b600c5481565b6008600083815260200190815260200160002060000160019054906101000a900460ff16612393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238a9061379b565b60405180910390fd5b60016008600084815260200190815260200160002060000160006101000a81548160ff021916908315150217905550806008600084815260200190815260200160002060010190805190602001906123ec929190612787565b5080600d9080519060200190612403929190612787565b5081600c81905550600060096000600c54815260200190815260200160002054905060006005600083815260200190815260200160002080549050600d600081548110612453576124526136b4565b5b906000526020600020015461246891906137ea565b90506000600560008481526020019081526020016000208281548110612491576124906136b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600580600086815260200190815260200160002080549050600460008781526020019081526020016000206000015460046124fb919061381b565b612505919061381b565b61250f9190613875565b905060016004600086815260200190815260200160002060030160006101000a81548160ff0219169083600181111561254b5761254a612b0a565b5b021790555060008273ffffffffffffffffffffffffffffffffffffffff168260405161257690613219565b60006040518083038185875af1925050503d80600081146125b3576040519150601f19603f3d011682016040523d82523d6000602084013e6125b8565b606091505b50509050806125fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f3906138f2565b60405180910390fd5b60005b60056000878152602001908152602001600020805490508110156126dc576000600560008881526020019081526020016000208281548110612644576126436136b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506004600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126c19190612efd565b925050819055505080806126d4906132df565b9150506125ff565b506001600260008282546126f09190612efd565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f3444ac4b5677732d228b4956f1313b0f06d68623b75e34aebb92a1b061da17248660405161273d91906128ad565b60405180910390a27ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d87876040516127769291906139d0565b60405180910390a150505050505050565b8280548282559060005260206000209081019282156127c3579160200282015b828111156127c25782518255916020019190600101906127a7565b5b5090506127d091906127d4565b5090565b5b808211156127ed5760008160009055506001016127d5565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61281881612805565b811461282357600080fd5b50565b6000813590506128358161280f565b92915050565b600060208284031215612851576128506127fb565b5b600061285f84828501612826565b91505092915050565b60008115159050919050565b61287d81612868565b82525050565b60006020820190506128986000830184612874565b92915050565b6128a781612805565b82525050565b60006020820190506128c2600083018461289e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612916826128cd565b810181811067ffffffffffffffff82111715612935576129346128de565b5b80604052505050565b60006129486127f1565b9050612954828261290d565b919050565b600067ffffffffffffffff821115612974576129736128de565b5b602082029050602081019050919050565b600080fd5b600061299d61299884612959565b61293e565b905080838252602082019050602084028301858111156129c0576129bf612985565b5b835b818110156129e957806129d58882612826565b8452602084019350506020810190506129c2565b5050509392505050565b600082601f830112612a0857612a076128c8565b5b8135612a1884826020860161298a565b91505092915050565b60008060408385031215612a3857612a376127fb565b5b6000612a4685828601612826565b925050602083013567ffffffffffffffff811115612a6757612a66612800565b5b612a73858286016129f3565b9150509250929050565b600061ffff82169050919050565b612a9481612a7d565b8114612a9f57600080fd5b50565b600081359050612ab181612a8b565b92915050565b600080600060608486031215612ad057612acf6127fb565b5b6000612ade86828701612aa2565b9350506020612aef86828701612826565b9250506040612b0086828701612826565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612b4a57612b49612b0a565b5b50565b6000819050612b5b82612b39565b919050565b6000612b6b82612b4d565b9050919050565b612b7b81612b60565b82525050565b600060a082019050612b96600083018861289e565b612ba3602083018761289e565b612bb0604083018661289e565b612bbd6060830185612b72565b612bca608083018461289e565b9695505050505050565b600067ffffffffffffffff82169050919050565b612bf181612bd4565b82525050565b6000602082019050612c0c6000830184612be8565b92915050565b6000604082019050612c276000830185612874565b612c346020830184612874565b9392505050565b60008060408385031215612c5257612c516127fb565b5b6000612c6085828601612826565b9250506020612c7185828601612826565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ca682612c7b565b9050919050565b612cb681612c9b565b82525050565b6000602082019050612cd16000830184612cad565b92915050565b6000612ce282612c7b565b9050919050565b612cf281612cd7565b8114612cfd57600080fd5b50565b600081359050612d0f81612ce9565b92915050565b600060208284031215612d2b57612d2a6127fb565b5b6000612d3984828501612d00565b91505092915050565b6000606082019050612d57600083018661289e565b612d64602083018561289e565b612d71604083018461289e565b949350505050565b612d8281612cd7565b82525050565b6000604082019050612d9d6000830185612d79565b612daa6020830184612d79565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612deb82612805565b9150612df683612805565b925082821015612e0957612e08612db1565b5b828203905092915050565b600082825260208201905092915050565b7f796f7520617265206e6577206269650000000000000000000000000000000000600082015250565b6000612e5b600f83612e14565b9150612e6682612e25565b602082019050919050565b60006020820190508181036000830152612e8a81612e4e565b9050919050565b7f6e6f7420323420686f7572732070617374000000000000000000000000000000600082015250565b6000612ec7601183612e14565b9150612ed282612e91565b602082019050919050565b60006020820190508181036000830152612ef681612eba565b9050919050565b6000612f0882612805565b9150612f1383612805565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f4857612f47612db1565b5b828201905092915050565b7f796f7520617265206e6f7420656c696769626c65000000000000000000000000600082015250565b6000612f89601483612e14565b9150612f9482612f53565b602082019050919050565b60006020820190508181036000830152612fb881612f7c565b9050919050565b6000819050919050565b612fd281612fbf565b82525050565b612fe181612a7d565b82525050565b600063ffffffff82169050919050565b61300081612fe7565b82525050565b600060a08201905061301b6000830188612fc9565b6130286020830187612be8565b6130356040830186612fd8565b6130426060830185612ff7565b61304f6080830184612ff7565b9695505050505050565b6000815190506130688161280f565b92915050565b600060208284031215613084576130836127fb565b5b600061309284828501613059565b91505092915050565b60006040820190506130b0600083018561289e565b6130bd6020830184612ff7565b9392505050565b7f63616e206e6f742065786368616e6765206e6f772c6c6f7720636f6e7472616360008201527f742062616c616e63652000000000000000000000000000000000000000000000602082015250565b6000613120602a83612e14565b915061312b826130c4565b604082019050919050565b6000602082019050818103600083015261314f81613113565b9050919050565b7f616c6c206c6f74746572792073686f756c6420626520696e20636c6f7365642060008201527f7374617465000000000000000000000000000000000000000000000000000000602082015250565b60006131b2602583612e14565b91506131bd82613156565b604082019050919050565b600060208201905081810360008301526131e1816131a5565b9050919050565b600081905092915050565b50565b60006132036000836131e8565b915061320e826131f3565b600082019050919050565b6000613224826131f6565b9150819050919050565b7f7472616e73616374696f6e204661696c65640000000000000000000000000000600082015250565b6000613264601283612e14565b915061326f8261322e565b602082019050919050565b6000602082019050818103600083015261329381613257565b9050919050565b60006080820190506132af600083018761289e565b6132bc602083018661289e565b6132c9604083018561289e565b6132d6606083018461289e565b95945050505050565b60006132ea82612805565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561331d5761331c612db1565b5b600182019050919050565b7f6f776e657220726571756972656420666f722073687574646f776e206c6f747460008201527f6572790000000000000000000000000000000000000000000000000000000000602082015250565b6000613384602383612e14565b915061338f82613328565b604082019050919050565b600060208201905081810360008301526133b381613377565b9050919050565b7f6e6f206e65656420746f20617070726f7665206c6f747465727920776173207360008201527f75636365737366756c0000000000000000000000000000000000000000000000602082015250565b6000613416602983612e14565b9150613421826133ba565b604082019050919050565b6000602082019050818103600083015261344581613409565b9050919050565b7f7761697420666f7220736f6d6574696d65000000000000000000000000000000600082015250565b6000613482601183612e14565b915061348d8261344c565b602082019050919050565b600060208201905081810360008301526134b181613475565b9050919050565b7f796f7520617265206e6f7420656c696769626c6520666f7220636f6d6d65726360008201527f69616c2066756e64000000000000000000000000000000000000000000000000602082015250565b6000613514602883612e14565b915061351f826134b8565b604082019050919050565b6000602082019050818103600083015261354381613507565b9050919050565b7f736f72727920796f752063616e206e6f742063617368206f7574206e6f772c6c60008201527f6f772062616c616e636500000000000000000000000000000000000000000000602082015250565b60006135a6602a83612e14565b91506135b18261354a565b604082019050919050565b600060208201905081810360008301526135d581613599565b9050919050565b7f7472616e73616374696f6e206661696c65640000000000000000000000000000600082015250565b6000613612601283612e14565b915061361d826135dc565b602082019050919050565b6000602082019050818103600083015261364181613605565b9050919050565b7f7375636365737346756c6c7920636f6d706c65746564206c6f74746572790000600082015250565b600061367e601e83612e14565b915061368982613648565b602082019050919050565b600060208201905081810360008301526136ad81613671565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f796f7520617265206e6f7420696e2074686973206c6973740000000000000000600082015250565b6000613719601883612e14565b9150613724826136e3565b602082019050919050565b600060208201905081810360008301526137488161370c565b9050919050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000613785601183612e14565b91506137908261374f565b602082019050919050565b600060208201905081810360008301526137b481613778565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006137f582612805565b915061380083612805565b9250826138105761380f6137bb565b5b828206905092915050565b600061382682612805565b915061383183612805565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561386a57613869612db1565b5b828202905092915050565b600061388082612805565b915061388b83612805565b92508261389b5761389a6137bb565b5b828204905092915050565b7f6661696c65640000000000000000000000000000000000000000000000000000600082015250565b60006138dc600683612e14565b91506138e7826138a6565b602082019050919050565b6000602082019050818103600083015261390b816138cf565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61394781612805565b82525050565b6000613959838361393e565b60208301905092915050565b6000602082019050919050565b600061397d82613912565b613987818561391d565b93506139928361392e565b8060005b838110156139c35781516139aa888261394d565b97506139b583613965565b925050600181019050613996565b5085935050505092915050565b60006040820190506139e5600083018561289e565b81810360208301526139f78184613972565b9050939250505056fea264697066735822122059e2f9ffdf8073ae8fefd60a3ee4bce75e272f85b4e08ada4c38e695187e797864736f6c63430008080033",
  "devdoc": {
    "author": "helloiampratyush",
    "kind": "dev",
    "methods": {},
    "title": "a sample lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "this contract is for creating  untamperable decentralized lottery smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 180,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "randomAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 205,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "lotteryCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 208,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "lotteryCompletionOwnerTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 210,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "i_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 215,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "lotteryMap",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(lotteryThings)195_storage)"
      },
      {
        "astId": 220,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "s_players",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)"
      },
      {
        "astId": 224,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "tokenBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 229,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "loginManagement",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(login)202_storage)"
      },
      {
        "astId": 234,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "s_requests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)281_storage)"
      },
      {
        "astId": 238,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "relationId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 284,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(VRFCoordinatorV2Interface)153"
      },
      {
        "astId": 286,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 289,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "requestIds",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 291,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 294,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "lastRandomWords",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 297,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "keyHash",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 300,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 303,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "15",
        "type": "t_uint16"
      },
      {
        "astId": 306,
        "contract": "contracts/lottery.sol:RandomLottery",
        "label": "numWords",
        "offset": 6,
        "slot": "15",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)153": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(lotteryState)183": {
        "encoding": "inplace",
        "label": "enum RandomLottery.lotteryState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(login)202_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RandomLottery.login)",
        "numberOfBytes": "32",
        "value": "t_struct(login)202_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address payable[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address_payable)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)281_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RandomLottery.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)281_storage"
      },
      "t_mapping(t_uint256,t_struct(lotteryThings)195_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RandomLottery.lotteryThings)",
        "numberOfBytes": "32",
        "value": "t_struct(lotteryThings)195_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RequestStatus)281_storage": {
        "encoding": "inplace",
        "label": "struct RandomLottery.RequestStatus",
        "members": [
          {
            "astId": 275,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 277,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 280,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(login)202_storage": {
        "encoding": "inplace",
        "label": "struct RandomLottery.login",
        "members": [
          {
            "astId": 197,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "streak",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 199,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "s_lastTimeStamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 201,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "check_reset",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(lotteryThings)195_storage": {
        "encoding": "inplace",
        "label": "struct RandomLottery.lotteryThings",
        "members": [
          {
            "astId": 185,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "s_entranceFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 187,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "s_latestTimeStamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 189,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "s_interval",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 192,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "s_lotteryState",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(lotteryState)183"
          },
          {
            "astId": 194,
            "contract": "contracts/lottery.sol:RandomLottery",
            "label": "MinPlayers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}